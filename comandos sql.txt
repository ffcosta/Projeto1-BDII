Logar
SQLPLUS /NOLOG  \\sem informar usuário
CONNECT  sys / AS SYSDBA \\ conectar ao root

CONNECT user_universidade/123456;

Listar bd
select con_id, cdb, name, open_mode from v$database;

listar pdb
select con_id, name, open_mode from v$pdbs;  

show com_name

mudar de bd
connect user/senha


Rodar sql 
@/Users/ffcos/Desktop/dino_ent.sql

Selecionar tabelas
select * from tab;

exibir usuário atual: show user

rodar script no root
alter session set "_ORACLE_SCRIPT"=true;

setar container 
alter session set container = pdboracl;

— Tamanho do banco
select sum(bytes) / 1024 / 1024 / 1024 tamanho_GB from dba_segments;

— Tamanho por Tablespace
select tablespace_name, sum(bytes) / 1024 / 1024 / 1024 tamanho_GB from dba_segments group by tablespace_name;


caminho raiz
C:\APP\ORACLE12C\ORADATA\ORCL\SYSTEM01.DBF


Tamanho do bloco
SELECT name,value,isdefault,description FROM v$parameter
where name = 'db_block_size';

verificar se a tablespace e gerenciada loca
select tablespace_name, extent_management
from dba_tablespaces;
listar tabelas por tablespace
SELECT
    OWNER,
    TABLE_NAME,
    TABLESPACE_NAME
FROM
    ALL_TABLES
Where table_name = ‘ENDERECO’;


CREATE USER user_univers IDENTIFIED BY 123 
DEFAULT TABLESPACE "UNIVERSIDADE"
TEMPORARY TABLESPACE "TEMP";

ELIMINAR TABELAS INCLUISIVE COM REF DE CHAVE ESTRANGEIRAS
drop table "USER_UNIVERS"."ENDERECO" cascade constraints;


mover tablespace
alter table endereco move tablespace universidade;

verificar gerenciamento de memoria: show sga


selecionar tamanho do buffer
SELECT NAME, BLOCK_SIZE, SUM(BUFFERS)
  FROM V$BUFFER_POOL
 GROUP BY NAME, BLOCK_SIZE
 HAVING SUM(BUFFERS) > 0;

Verificando buffer poll
SELECT size_for_estimate, buffers_for_estimate, estd_physical_read_factor,
       estd_physical_reads
  FROM V$DB_CACHE_ADVICE
 WHERE name = 'DEFAULT'
   AND block_size = (SELECT value FROM V$PARAMETER WHERE name = 'db_block_size')
   AND advice_status = 'ON';

Verificar índices na tabela
SELECT nome_da_tabela as "NOME DA TABELA", count(*) as "QTDE. DE INDICES" FROM
dba_indexes WHERE owner=''''USUARIO'''' GROUP BY nome_da_tabela;

verificar o tamanho do BD
select sum(bytes) /1073741824  TAMANHO_GB from dba_segments;

mover para outra tablespace
ALTER TABLE nome_da_tabela MOVE TABLESPACE nome_do_novo_tablespace
;
alter session set "_ORACLE_SCRIPT"=true;

GRANT CONNECT, DBA TO user_univers;

tamanho das tabelas
select table_name,
     decode(partitioned,'/','NO',partitioned) partitioned,
     num_rows,
     data_mb,
     indx_mb,
     lob_mb,
     total_mb
      from (select data.table_name,
              partitioning_type
             || decode (subpartitioning_type,
                         'none', null,
                         '/' || subpartitioning_type)
                     partitioned,
              num_rows,
              nvl(data_mb,0) data_mb,
              nvl(indx_mb,0) indx_mb,
             nvl(lob_mb,0) lob_mb,
              nvl(data_mb,0) + nvl(indx_mb,0) + nvl(lob_mb,0) total_mb
              from (  select table_name,
                    nvl(min(num_rows),0) num_rows,
                    round(sum(data_mb),2) data_mb
                       from (select table_name, num_rows, data_mb
                           from (select a.table_name,
                                 a.num_rows,
                                 b.bytes/1024/1024 as data_mb
                                   from user_tables a, user_segments b
                                   where a.table_name = b.segment_name))
                  group by table_name) data,
                  (  select a.table_name,
                         round(sum(b.bytes/1024/1024),2) as indx_mb
                      from user_indexes a, user_segments b
                        where a.index_name = b.segment_name
                     group by a.table_name) indx,
                  (  select a.table_name,
                        round(sum(b.bytes/1024/1024),2) as lob_mb
                     from user_lobs a, user_segments b
                    where a.segment_name = b.segment_name
                     group by a.table_name) lob,
                    user_part_tables part
              where     data.table_name = indx.table_name(+)
                    and data.table_name = lob.table_name(+)
                    and data.table_name = part.table_name(+))
   order by table_name;

select count(*) segments,
        round(sum(bytes)/1024/1024,2) size_mb
      from user_segments;



MONITORAR INDICES
ALTER INDEX CPF MONITORING USAGE;
ALTER INDEX CPF NOMONITORING USAGE;

SELECT INDEX_NAME, TABLE_NAME, MONITORING, USED, START_MONITORING, END_MONITORING
FROM V$OBJECT_USAGE
ORDER BY TABLE_NAME, INDEX_NAME;


 SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SET ALLOW_SNAPSHOT_ISOLATION ON;

forcar o uso do index
 /*+ index */
